#!/usr/bin/env python2

import sys
from matplotlib import pyplot as plt
from optparse import OptionParser
from matplotlib import ticker


parser = OptionParser()
parser.add_option("-i", "--input", dest = "input",
        help = "input data filename; if none, stdin")
parser.add_option("-o", "--output", dest = "output",
        help = "output image filename; if none, show in window")
parser.add_option("-s", "--style", dest = "style",
        default = ".",
        help = "pyplot line style")
parser.add_option("--header", dest = "header",
        action = "store_true",
        help = "use first line as header to label lines")
parser.add_option("-z", "--zero", dest = "zero",
        default = "",
        help = "one of '', X, Y, XY; select axes to start at zero")
parser.add_option("-l", "--log", dest = "log",
        default = "",
        help = "one of '', X, Y, XY; select axes to be logarithmic")

opt, args = parser.parse_args(sys.argv[1:])
if opt.input: 
    opt.input = open(opt.input)
else:
   opt.input = sys.stdin

opt.zero = opt.zero.lower()
opt.log = opt.log.lower()

lines = opt.input.readlines()

if opt.header:
    legend = lines[0].split()
    lines = lines[1:]
else:
    legend = range(len(lines[0].split()))


rows = [line.split() for line in lines]

x = [row[0] for row in rows]
try:
    x = [float(v) for v in x]
except Exception:
    pass

for i in range(1, len(rows[0])):
    y = [float(row[i]) for row in rows]
    plt.plot(x, y, opt.style, label = str(legend[i]))

if "x" in opt.zero:
    plt.xlim(0)
if "y" in opt.zero:
    plt.ylim(0)

if "x" in opt.log:
    plt.xscale("log")
    plt.gca().xaxis.set_minor_formatter(
            ticker.LogFormatterSciNotation(labelOnlyBase = False, minor_thresholds=(3, 0.4)))
if "y" in opt.log:
    plt.yscale("log")
    plt.gca().yaxis.set_minor_formatter(
            ticker.LogFormatterSciNotation(labelOnlyBase = False, minor_thresholds=(3, 0.4)))

plt.legend()
plt.grid()
plt.grid(which = "minor", alpha = 0.2)
if opt.output:
    plt.savefig(opt.output)
else:
    plt.show()
